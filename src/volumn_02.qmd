```{julia}
using GLMakie
using Makie
using JLD2

arr = load("temp.jld2", "arr_Tmax");
val0 = 273.15

vol = replace(arr, missing => val0) .- val0;
nlon, nlat, ntime = size(vol)
```


```{julia}
fig = Figure()
# limits = ((1, 1, 1), (nlon, nlat, ntime))
# limits = limits,
ax = LScene(fig, scenekw = (show_axis = true))

# update_limits!(ax, limits)

# x = LinRange(0, π, 50)
x = 1:nlon
y = 1:nlat
z = 1:ntime
# y = LinRange(0, 2π, 100)
# z = LinRange(0, 3π, 150)
lsgrid = labelslidergrid!(
  fig,
  ["yz plane - x axis", "xz plane - y axis", "xy plane - z axis"],
  [1:length(x), 1:length(y), 1:length(z)]
)
fig[2, 1] = lsgrid.layout

colormap = RGBA.(to_colormap(:plasma), 1.0)
colormap[1] = RGBA(0, 0, 0, 0)

# vol = [cos(X) * sin(Y) * sin(Z) for X ∈ x, Y ∈ y, Z ∈ z]
plt = volumeslices!(ax, x, y, z, vol, colormap = colormap)

# connect sliders to `volumeslices` update methods
sl_yz, sl_xz, sl_xy = lsgrid.sliders

on(sl_yz.value) do v
  plt[:update_yz][](v)
end
on(sl_xz.value) do v
  plt[:update_xz][](v)
end
on(sl_xy.value) do v
  plt[:update_xy][](v)
end

set_close_to!(sl_yz, 0.5length(x))
set_close_to!(sl_xz, 0.5length(y))
set_close_to!(sl_xy, 0.5length(z))

ax2 = LScene(fig[1, 2], scenekw = (show_axis = true, limits = limits,))
plt2 = volume!(ax2, vol, algorithms = :absorption) # colormap = colormap, 
# , x, y, z, 
Colorbar(fig[:, 0], plt2, height = Relative(0.5))

colgap!(fig.layout, 0)
rowgap!(fig.layout, 0)
# cam3d!(ax.scene, projectiontype=Makie.Orthographic)
fig
# •  :iso => IsoValue
# •  :absorption => Absorption
# •  :mip => MaximumIntensityProjection
# •  :absorptionrgba => AbsorptionRGBA
# •  :additive => AdditiveRGBA
# •  :indexedabsorption => IndexedAbsorptionRGBA
```
