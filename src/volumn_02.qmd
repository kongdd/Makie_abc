```{julia}
using GLMakie
# using Makie
using JLD2

arr = load("temp.jld2", "arr_Tmax");
val0 = 273.15

vol = replace(arr, missing => val0) .- val0;
nlon, nlat, ntime = size(vol)

x = 1:nlon
y = 1:nlat
z = 1:ntime
```


```{julia}
fig = Figure()

limits = ((1, 1, 1), (nlon, nlat, ntime))
# limits = limits,
# ax = LScene(fig, scenekw = (show_axis = true))
# update_limits!(ax, limits)
sg = SliderGrid(fig[1, 1],
  (label="x", range=x),
  (label="y", range=y),
  (label="z", range=z)
)

# fig[2, 1] = lsgrid.layout
# colormap = RGBA.(to_colormap(:plasma), 1.0)
# colormap[1] = RGBA(0, 0, 0, 0)
# vol = [cos(X) * sin(Y) * sin(Z) for X ∈ x, Y ∈ y, Z ∈ z]
# , colormap = colormap
plt = volumeslices!(ax, x, y, z, vol)

on(i) do v
  plt[:update_yz][](v)
end
on(j) do v
  plt[:update_xz][](v)
end
on(k) do v
  plt[:update_xy][](v)
end
# connect sliders to `volumeslices` update methods
# update_slice(plt, sl_yz, sl_xz, sl_xy)

# limits = limits
ax2 = LScene(fig[1, 2], scenekw = (show_axis = true,))
plt2 = volume!(ax2, vol, algorithms = :absorption) # colormap = colormap, 
# , x, y, z, 
Colorbar(fig[:, 0], plt2, height = Relative(0.5))

colgap!(fig.layout, 0)
rowgap!(fig.layout, 0)
# cam3d!(ax.scene, projectiontype=Makie.Orthographic)
fig
# •  :iso => IsoValue
# •  :absorption => Absorption
# •  :mip => MaximumIntensityProjection
# •  :absorptionrgba => AbsorptionRGBA
# •  :additive => AdditiveRGBA
# •  :indexedabsorption => IndexedAbsorptionRGBA
```
