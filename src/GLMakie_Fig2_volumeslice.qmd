## 加载数据

```{julia}
include("../main_pkgs.jl")

vol = rand(nlon, nlat, ntime)
```

## 绘图

```{julia}
mytheme = Theme(fontsize=36)
set_theme!(mytheme)

fig = Figure()
slon, slat, stime, i, j, k = make_slider_3d(fig[2, 1], lon, lat, time)

ax = Axis3(fig[1, 1], viewmode=:fit, 
  xlabel = "Lon", ylabel = "Lat", zlabel = "Time", 
  limits = ((70, 140), (15, 55), (1, 366)))
# ax = LScene(fig[1, 1], scenekw=(show_axis=false,)) # not used
plt = volumeslices!(ax, lon, lat, time, vol)

on(i) do v
  plt[:update_yz][](v)
end
on(j) do v
  plt[:update_xz][](v)
end
on(k) do v
  plt[:update_xy][](v)
end

colgap!(fig.layout, 0)
rowgap!(fig.layout, 0)

fig
```



## test
```{julia}
fig = Figure()
ax = LScene(fig[1, 1], scenekw=(show_axis=true, tellwidth=false, tellheight=false))
# ax.aspect = DataAspect()
# vol = [cos(X) * sin(Y) * sin(Z) for X ∈ x, Y ∈ y, Z ∈ z]
# plt = volume!(ax, lon, lat, time, vol) #  


sg = SliderGrid(fig[2, 1],
  (label="x", range=x),
  (label="y", range=y),
  (label="z", range=z)
)
sl_yz, sl_xz, sl_xy = sg.sliders

plt = volumeslices!(ax, x, y, z, vol,) #  
set_close_to!(sl_yz, 0.5length(x))
set_close_to!(sl_xz, 0.5length(y))
set_close_to!(sl_xy, 0.5length(z))

on(sl_yz.value) do v
  plt[:update_yz][](v)
end
on(sl_xz.value) do v
  plt[:update_xz][](v)
end
on(sl_xy.value) do v
  plt[:update_xy][](v)
end

lo = sg.layout
nc = ncols(lo)

hmaps = [plt[Symbol(:heatmap_, s)][] for s ∈ (:yz, :xz, :xy)]
toggles = [Toggle(lo[i, nc+1], active=true) for i ∈ 1:length(hmaps)]

map(zip(hmaps, toggles)) do (h, t)
  connect!(h.visible, t.active)
end

fig
```


```{julia}
using GLMakie


fig = Figure()
# ax = LScene(fig[1, 1], show_axis=false)
ax = Axis3(fig[1, 1], viewmode = :fit)

x = LinRange(0, π, 50)
y = LinRange(0, 2π, 100)
z = LinRange(0, 3π, 150)

sgrid = SliderGrid(
  fig[2, 1],
  (label="yz plane - x axis", range=1:length(x)),
  (label="xz plane - y axis", range=1:length(y)),
  (label="xy plane - z axis", range=1:length(z)),
)

lo = sgrid.layout
nc = ncols(lo)

vol = [cos(X) * sin(Y) * sin(Z) for X ∈ x, Y ∈ y, Z ∈ z]
plt = volumeslices!(ax, x, y, z, vol)

# connect sliders to `volumeslices` update methods
sl_yz, sl_xz, sl_xy = sgrid.sliders

on(sl_yz.value) do v
  plt[:update_yz][](v)
end
on(sl_xz.value) do v
  plt[:update_xz][](v)
end
on(sl_xy.value) do v
  plt[:update_xy][](v)
end

set_close_to!(sl_yz, 0.5length(x))
set_close_to!(sl_xz, 0.5length(y))
set_close_to!(sl_xy, 0.5length(z))

# add toggles to show/hide heatmaps
hmaps = [plt[Symbol(:heatmap_, s)][] for s ∈ (:yz, :xz, :xy)]
toggles = [Toggle(lo[i, nc+1], active=true) for i ∈ 1:length(hmaps)]

map(zip(hmaps, toggles)) do (h, t)
  connect!(h.visible, t.active)
end

# cam3d!(ax.scene, projectiontype=Makie.Orthographic)
fig
```
